Here is how a generator function differs from a normal function.

1.Generator function contains one or more yield statement.

2.When called, it returns an object (iterator) but does not start execution immediately.

3.Methods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().

4.Once the function yields, the function is paused and the control is transferred to the caller.

5.Local variables and their states are remembered between successive calls.

6.Finally, when the function terminates, StopIteration is raised automatically on further calls.





Here is an example to illustrate all of the points stated above.
We have a generator function named my_gen() with several yield statements.












An interactive run in the interpreter is given below. Run these in the Python shell to see the output.

>>> # It returns an object but does not start execution immediately.
>>> a = my_gen()

>>> # We can iterate through the items using next().
>>> next(a)
This is printed first
1
>>> # Once the function yields, the function is paused and the control is transferred to the caller.

>>> # Local variables and theirs states are remembered between successive calls.
>>> next(a)
This is printed second
2

>>> next(a)
This is printed at last
3

>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.
>>> next(a)
Traceback (most recent call last):
...
StopIteration
>>> next(a)
Traceback (most recent call last):
...
StopIteration




One interesting thing to note in the above example is that, the value of variable n is remembered between each call.

Unlike normal functions, the local variables are not destroyed when the function yields. Furthermore,
the generator object can be iterated only once.

To restart the process we need to create another generator object using something like a = my_gen().



Note: One final thing to note is that we can use generators with for loops directly.

This is because, a for loop takes an iterator and iterates over it using next() function.
It automatically ends when StopIteration is raised.