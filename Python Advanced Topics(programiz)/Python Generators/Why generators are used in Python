There are several reasons which make generators an attractive implementation to go for.

1. Easy to Implement
Generators can be implemented in a clear and concise way as compared to their iterator class counterpart.
Following is an example to implement a sequence of power of 2's using iterator class.


2. Memory Efficient
A normal function to return a sequence will create the entire sequence in memory before returning the result.
This is an overkill if the number of items in the sequence is very large.

Generator implementation of such sequence is memory friendly and is preferred since it only produces one item at a time.



3. Represent Infinite Stream
Generators are excellent medium to represent an infinite stream of data.
Infinite streams cannot be stored in memory and since generators produce only one item at a time,
it can represent infinite stream of data.

The following example can generate all the even numbers (at least in theory).




def all_even():
    n = 0
    while True:
        yield n
        n += 2





4. Pipelining Generators
Generators can be used to pipeline a series of operations. This is best illustrated using an example.

Suppose we have a log file from a famous fast food chain. The log file has a column (4th column) that keeps track of the
number of pizza sold every hour and we want to sum it to find the total pizzas sold in 5 years.

Assume everything is in string and numbers that are not available are marked as 'N/A'.
A generator implementation of this could be as follows.

This pipelining is efficient and easy to read (and yes, a lot cooler!).