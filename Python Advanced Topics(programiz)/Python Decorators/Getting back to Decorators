Functions and methods are called callable as they can be called.

In fact, any object which implements the special method __call__() is termed callable.
So, in the most basic sense, a decorator is a callable that returns a callable.

Basically, a decorator takes in a function, adds some functionality and returns it.




When you run the following codes in shell,

>>> ordinary()
I am ordinary

>>> # let's decorate this ordinary function
>>> pretty = make_pretty(ordinary)
>>> pretty()
I got decorated
I am ordinary


In the example shown above, make_pretty() is a decorator. In the assignment step.

pretty = make_pretty(ordinary)


The function ordinary() got decorated and the returned function was given the name pretty.

We can see that the decorator function added some new functionality to the original function. This is similar to packing a gift.
The decorator acts as a wrapper. The nature of the object that got decorated (actual gift inside) does not alter.
But now, it looks pretty (since it got decorated).

Generally, we decorate a function and reassign it as,

ordinary = make_pretty(ordinary).
This is a common construct and for this reason, Python has a syntax to simplify this.

We can use the @ symbol along with the name of the decorator function and place it above the definition of the function to be decorated.
For example,
