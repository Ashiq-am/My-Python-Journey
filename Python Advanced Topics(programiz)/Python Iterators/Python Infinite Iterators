It is not necessary that the item in an iterator object has to exhaust. There can be infinite iterators (which never ends).
We must be careful when handling such iterator.

Here is a simple example to demonstrate infinite iterators.

The built-in function iter() can be called with two arguments where the first argument must be a callable object (function) and
second is the sentinel. The iterator calls this function until the returned value is equal to the sentinel.



>>> int()
0

>>> inf = iter(int,1)
>>> next(inf)
0
>>> next(inf)
0




We can see that the int() function always returns 0.
So passing it as iter(int,1) will return an iterator that calls int() until the returned value equals 1.
This never happens and we get an infinite iterator.

We can also built our own infinite iterators. The following iterator will, theoretically, return all the odd numbers.








A sample run would be as follows.

>>> a = iter(InfIter())
>>> next(a)
1
>>> next(a)
3
>>> next(a)
5
>>> next(a)
7


And so on...

Be careful to include a terminating condition, when iterating over these type of infinite iterators.

The advantage of using iterators is that they save resources. Like shown above,
we could get all the odd numbers without storing the entire number system in memory.
We can have infinite items (theoretically) in finite memory.

Iterator also makes our code look cool.