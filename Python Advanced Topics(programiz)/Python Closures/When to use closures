So what are closures good for?

Closures can avoid the use of global values and provides some form of data hiding. It can also provide an object oriented
solution to the problem.

When there are few methods (one method in most cases) to be implemented in a class,
closures can provide an alternate and more elegant solutions. But when the number of attributes and methods get larger,
better implement a class.

Here is a simple example where a closure might be more preferable than defining a class and making objects.
But the preference is all yours.



Decorators in Python make an extensive use of closures as well.

On a concluding note, it is good to point out that the values that get enclosed in the closure function can be found out.

All function objects have a __closure__ attribute that returns a tuple of cell objects if it is a closure function.
Referring to the example above, we know times3 and times5 are closure functions.



>>> make_multiplier_of.__closure__
>>> times3.__closure__
(<cell at 0x0000000002D155B8: int object at 0x000000001E39B6E0>,)


The cell object has the attribute cell_contents which stores the closed value.



>>> times3.__closure__[0].cell_contents
3
>>> times5.__closure__[0].cell_contents
5