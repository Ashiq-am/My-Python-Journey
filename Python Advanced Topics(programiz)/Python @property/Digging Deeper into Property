In Python, property() is a built-in function that creates and returns a property object. The signature of this function is

property(fget=None, fset=None, fdel=None, doc=None)



where, fget is function to get value of the attribute, fset is function to set value of the attribute,
fdel is function to delete the attribute and doc is a string (like a comment). As seen from the implementation,
these function arguments are optional. So, a property object can simply be created as follows.

>>> property()
<property object at 0x0000000003239B38>



A property object has three methods, getter(), setter(), and deleter() to specify fget, fset and fdel at a later point.
This means, the line

temperature = property(get_temperature,set_temperature)



could have been broken down as


# make empty property
temperature = property()
# assign fget
temperature = temperature.getter(get_temperature)
# assign fset
temperature = temperature.setter(set_temperature)




These two pieces of codes are equivalent.

Programmers familiar with decorators in Python can recognize that the above construct can be implemented as decorators.

We can further go on and not define names get_temperature and set_temperature as they are unnecessary and pollute the class namespace.
For this, we reuse the name temperature while defining our getter and setter functions. This is how it can be done.



The above implementation is both, simple and recommended way to make properties.
You will most likely encounter these types of constructs when looking for property in Python.