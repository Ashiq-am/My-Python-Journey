Scope of a variable is the portion of a program where the variable is recognized. Parameters and
variables defined inside a function is not visible from outside. Hence, they have a local scope.

Lifetime of a variable is the period throughout which the variable exits in the memory.
The lifetime of variables inside a function is as long as the function executes.

They are destroyed once we return from the function.
Hence, a function does not remember the value of a variable from its previous calls.

Here is an example to illustrate the scope of a variable inside a function.




Here, we can see that the value of x is 20 initially. Even though the function my_func() changed the value of x to 10,
it did not effect the value outside the function.

This is because the variable x inside the function is different (local to the function) from the one outside.
Although they have same names, they are two different variables with different scope.

On the other hand, variables outside of the function are visible from inside. They have a global scope.

We can read these values from inside the function but cannot change (write) them.
In order to modify the value of variables outside the function, they must be declared as global variables using the keyword global.